
public class index {

	/*
	 많은 변수를 가진 객체의 생성을 가독성 높도록 코딩할 수 있다.
	 
	 &가독성, 많은 멤버변수&
	 
	 많은 인자를 가진 객체의 생성을 다른 객체의 도움으로 생성하는 패턴.
	 */

	
	
	
	/*
	 복잡한 객체의 생성 과정과 표현 방법을 분리하여 동일한 생성 절차에서 서로 다른 표현 결과를 만들수 있게 하는 패턴
	 
	 팩토리 또는 추상팩토리 패턴과 많이 비슷하다. 
	 
	 빌더패턴도 새로운 객체를 만들어서 반환하는 패턴이지만 실제 동작 방식에서 차이가 난다
	 
	 빌더 패턴은 생성자에 들어갈 매개 변수가 많든 적든 차례차례 매개변수를 받아들이고 모든 매개 변수를 받은 뒤에 이 변수들을 통합해서 한번에 사용한다.
	 
	 
	 실제 코드를 작성해보면 깔끔하며, 불필요한 생성자를 만들지 않고 깔금하게 객체를 만들수 있으며
	 
	 데이터 순서와 상관 없이 객체를 만들 수 있고, 생성자 필드를 볼 필요 없이 직관적이고 명시적인 setter 메소드 이름으로 데이터를 추가하여
	 객체를 만들 수 있다. 반환된 객체에 setter 함수가 없다면 변경불가능한 객체가 될 수 있고 setter 함수가 있다면 변경도 가능한 객체가 될 수 있다.
	 
	 
	 
	 빌더 패턴의 단점으로는 객체를 생성하려면 우선 빌더 객체를 생성해야 한다. 실무에서 빌더 객체를 만드는 오버헤드의 문제가 될 소지는 없어 보이지만
	 성능이 중요한 상황에서 그렇지 않을 수도 있다. (점층적 생성자 패턴)보다 많은 고드를 요구하기 떄문에 인자가 충분히 많은 상황에서 이용해야 한다.
	 
	 인자가 적더라도 나중에 새로운 인자를 추가해야 할 상황이 있음을 기억하자.
	 
	 %빌더패턴%
	 	인자가 많은 생성자나 정적 팩토리가 필요한 클래스를 설계할 때 , 인자가 선택적 인자인 상황에 유용
	 
	 
	 
	 비슷한 예제로 생성자에 전달하는 인자 수가 많을 때 적용 가능한 두 번째 대안은 자바빈 패턴이다. 인자 없는 생성자를 호출하여 객체부터 만든 다음
	 설정메소드(setter)을 이용하여 값을 채운다. 단점으로는 1회의 함수 호출로 객체 생성을 끝낼 수 없으므로 객체 일관성이 일시적으로 깨질 수 있다.
	 변경 불가능한 클래스도 만들 수 없다.
	 */
}

